import { ec } from 'elliptic';
import { hashTransaction } from './hashing';



/**
 * Verify that a signature for msg was generated by key
 */
const verifySignature = async (msg: Buffer, key: ec.KeyPair, signature: string): Promise<boolean> => {
    try {
        const sign = Buffer.from(signature, 'base64');
        // @ts-ignore: the typedef is wrong, a Buffer is an allowed input
        return key.verify(msg, sign);
    } catch (e) {
        throw Error('Could not decode signature. ' + e);
    }
};

/**
 * Returns signature encoded in DER format in base64.
 * @param sig 
 */
const encodeSignature = (sig: ec.Signature): string => {
    return Buffer.from(sig.toDER()).toString('base64');
};

/**
 * Verify that a signature for tx was generated by key
 */
const verifyTxSignature = async (tx: any, key: ec.KeyPair, signature: string): Promise<boolean> => {
    const msg = await hashTransaction(tx, 'bytes', false) as Buffer;
    return await verifySignature(msg, key, signature);
};

/**
 * Sign transaction with key.
 * @param {object} tx transaction
 * @param {BN} key key pair or private key
 */
const signTransaction = async (tx: any, key: ec.KeyPair): Promise<string> => {
    const msgHash = await hashTransaction(tx, 'bytes', false);
    const sig = key.sign(msgHash);
    return encodeSignature(sig);
};



export {
    signTransaction,
    verifyTxSignature,
    verifySignature,
    encodeSignature
};