/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var p2p_pb = require('./p2p_pb.js');
goog.object.extend(proto, p2p_pb);
goog.exportSymbol('proto.types.ConfChangeProgress', null, global);
goog.exportSymbol('proto.types.ConfChangeState', null, global);
goog.exportSymbol('proto.types.GetClusterInfoRequest', null, global);
goog.exportSymbol('proto.types.GetClusterInfoResponse', null, global);
goog.exportSymbol('proto.types.HardStateInfo', null, global);
goog.exportSymbol('proto.types.MemberAttr', null, global);
goog.exportSymbol('proto.types.MembershipChange', null, global);
goog.exportSymbol('proto.types.MembershipChangeReply', null, global);
goog.exportSymbol('proto.types.MembershipChangeType', null, global);
goog.exportSymbol('proto.types.SnapshotResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MemberAttr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.MemberAttr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.MemberAttr.displayName = 'proto.types.MemberAttr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MemberAttr.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MemberAttr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MemberAttr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MemberAttr.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    address: jspb.Message.getFieldWithDefault(msg, 3, ""),
    peerid: msg.getPeerid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MemberAttr}
 */
proto.types.MemberAttr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MemberAttr;
  return proto.types.MemberAttr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MemberAttr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MemberAttr}
 */
proto.types.MemberAttr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MemberAttr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MemberAttr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MemberAttr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MemberAttr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPeerid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional uint64 ID = 1;
 * @return {number}
 */
proto.types.MemberAttr.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.types.MemberAttr.prototype.setId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.types.MemberAttr.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.types.MemberAttr.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string address = 3;
 * @return {string}
 */
proto.types.MemberAttr.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.types.MemberAttr.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes peerID = 4;
 * @return {!(string|Uint8Array)}
 */
proto.types.MemberAttr.prototype.getPeerid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes peerID = 4;
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {string}
 */
proto.types.MemberAttr.prototype.getPeerid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeerid()));
};


/**
 * optional bytes peerID = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {!Uint8Array}
 */
proto.types.MemberAttr.prototype.getPeerid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeerid()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.MemberAttr.prototype.setPeerid = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MembershipChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.MembershipChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.MembershipChange.displayName = 'proto.types.MembershipChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MembershipChange.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MembershipChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MembershipChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MembershipChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    attr: (f = msg.getAttr()) && proto.types.MemberAttr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MembershipChange}
 */
proto.types.MembershipChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MembershipChange;
  return proto.types.MembershipChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MembershipChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MembershipChange}
 */
proto.types.MembershipChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.MembershipChangeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestid(value);
      break;
    case 3:
      var value = new proto.types.MemberAttr;
      reader.readMessage(value,proto.types.MemberAttr.deserializeBinaryFromReader);
      msg.setAttr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MembershipChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MembershipChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MembershipChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MembershipChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRequestid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAttr();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.types.MemberAttr.serializeBinaryToWriter
    );
  }
};


/**
 * optional MembershipChangeType type = 1;
 * @return {!proto.types.MembershipChangeType}
 */
proto.types.MembershipChange.prototype.getType = function() {
  return /** @type {!proto.types.MembershipChangeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.types.MembershipChangeType} value */
proto.types.MembershipChange.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 requestID = 2;
 * @return {number}
 */
proto.types.MembershipChange.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.types.MembershipChange.prototype.setRequestid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional MemberAttr attr = 3;
 * @return {?proto.types.MemberAttr}
 */
proto.types.MembershipChange.prototype.getAttr = function() {
  return /** @type{?proto.types.MemberAttr} */ (
    jspb.Message.getWrapperField(this, proto.types.MemberAttr, 3));
};


/** @param {?proto.types.MemberAttr|undefined} value */
proto.types.MembershipChange.prototype.setAttr = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.types.MembershipChange.prototype.clearAttr = function() {
  this.setAttr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MembershipChange.prototype.hasAttr = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.MembershipChangeReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.MembershipChangeReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.MembershipChangeReply.displayName = 'proto.types.MembershipChangeReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.MembershipChangeReply.prototype.toObject = function(opt_includeInstance) {
  return proto.types.MembershipChangeReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.MembershipChangeReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MembershipChangeReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    attr: (f = msg.getAttr()) && proto.types.MemberAttr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.MembershipChangeReply}
 */
proto.types.MembershipChangeReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.MembershipChangeReply;
  return proto.types.MembershipChangeReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.MembershipChangeReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.MembershipChangeReply}
 */
proto.types.MembershipChangeReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.types.MemberAttr;
      reader.readMessage(value,proto.types.MemberAttr.deserializeBinaryFromReader);
      msg.setAttr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.MembershipChangeReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.MembershipChangeReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.MembershipChangeReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.MembershipChangeReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.types.MemberAttr.serializeBinaryToWriter
    );
  }
};


/**
 * optional MemberAttr attr = 1;
 * @return {?proto.types.MemberAttr}
 */
proto.types.MembershipChangeReply.prototype.getAttr = function() {
  return /** @type{?proto.types.MemberAttr} */ (
    jspb.Message.getWrapperField(this, proto.types.MemberAttr, 1));
};


/** @param {?proto.types.MemberAttr|undefined} value */
proto.types.MembershipChangeReply.prototype.setAttr = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.types.MembershipChangeReply.prototype.clearAttr = function() {
  this.setAttr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.MembershipChangeReply.prototype.hasAttr = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.HardStateInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.HardStateInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.HardStateInfo.displayName = 'proto.types.HardStateInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.HardStateInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.types.HardStateInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.HardStateInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.HardStateInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    term: jspb.Message.getFieldWithDefault(msg, 1, 0),
    commit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.HardStateInfo}
 */
proto.types.HardStateInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.HardStateInfo;
  return proto.types.HardStateInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.HardStateInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.HardStateInfo}
 */
proto.types.HardStateInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTerm(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCommit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.HardStateInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.HardStateInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.HardStateInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.HardStateInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerm();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCommit();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 term = 1;
 * @return {number}
 */
proto.types.HardStateInfo.prototype.getTerm = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.types.HardStateInfo.prototype.setTerm = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 commit = 2;
 * @return {number}
 */
proto.types.HardStateInfo.prototype.getCommit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.types.HardStateInfo.prototype.setCommit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.GetClusterInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.GetClusterInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.GetClusterInfoRequest.displayName = 'proto.types.GetClusterInfoRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.GetClusterInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.types.GetClusterInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.GetClusterInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.GetClusterInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bestblockhash: msg.getBestblockhash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.GetClusterInfoRequest}
 */
proto.types.GetClusterInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.GetClusterInfoRequest;
  return proto.types.GetClusterInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.GetClusterInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.GetClusterInfoRequest}
 */
proto.types.GetClusterInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBestblockhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.GetClusterInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.GetClusterInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.GetClusterInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.GetClusterInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBestblockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes bestBlockHash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.GetClusterInfoRequest.prototype.getBestblockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes bestBlockHash = 1;
 * This is a type-conversion wrapper around `getBestblockhash()`
 * @return {string}
 */
proto.types.GetClusterInfoRequest.prototype.getBestblockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBestblockhash()));
};


/**
 * optional bytes bestBlockHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBestblockhash()`
 * @return {!Uint8Array}
 */
proto.types.GetClusterInfoRequest.prototype.getBestblockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBestblockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.GetClusterInfoRequest.prototype.setBestblockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.GetClusterInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.GetClusterInfoResponse.repeatedFields_, null);
};
goog.inherits(proto.types.GetClusterInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.GetClusterInfoResponse.displayName = 'proto.types.GetClusterInfoResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.GetClusterInfoResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.GetClusterInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.types.GetClusterInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.GetClusterInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.GetClusterInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: msg.getChainid_asB64(),
    clusterid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    error: jspb.Message.getFieldWithDefault(msg, 3, ""),
    mbrattrsList: jspb.Message.toObjectList(msg.getMbrattrsList(),
    proto.types.MemberAttr.toObject, includeInstance),
    bestblockno: jspb.Message.getFieldWithDefault(msg, 5, 0),
    hardstateinfo: (f = msg.getHardstateinfo()) && proto.types.HardStateInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.GetClusterInfoResponse}
 */
proto.types.GetClusterInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.GetClusterInfoResponse;
  return proto.types.GetClusterInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.GetClusterInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.GetClusterInfoResponse}
 */
proto.types.GetClusterInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setClusterid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 4:
      var value = new proto.types.MemberAttr;
      reader.readMessage(value,proto.types.MemberAttr.deserializeBinaryFromReader);
      msg.addMbrattrs(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBestblockno(value);
      break;
    case 6:
      var value = new proto.types.HardStateInfo;
      reader.readMessage(value,proto.types.HardStateInfo.deserializeBinaryFromReader);
      msg.setHardstateinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.GetClusterInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.GetClusterInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.GetClusterInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.GetClusterInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getClusterid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMbrattrsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.types.MemberAttr.serializeBinaryToWriter
    );
  }
  f = message.getBestblockno();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getHardstateinfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.types.HardStateInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes chainID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.types.GetClusterInfoResponse.prototype.getChainid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chainID = 1;
 * This is a type-conversion wrapper around `getChainid()`
 * @return {string}
 */
proto.types.GetClusterInfoResponse.prototype.getChainid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainid()));
};


/**
 * optional bytes chainID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainid()`
 * @return {!Uint8Array}
 */
proto.types.GetClusterInfoResponse.prototype.getChainid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainid()));
};


/** @param {!(string|Uint8Array)} value */
proto.types.GetClusterInfoResponse.prototype.setChainid = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 clusterID = 2;
 * @return {number}
 */
proto.types.GetClusterInfoResponse.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.types.GetClusterInfoResponse.prototype.setClusterid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string error = 3;
 * @return {string}
 */
proto.types.GetClusterInfoResponse.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.types.GetClusterInfoResponse.prototype.setError = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated MemberAttr mbrAttrs = 4;
 * @return {!Array<!proto.types.MemberAttr>}
 */
proto.types.GetClusterInfoResponse.prototype.getMbrattrsList = function() {
  return /** @type{!Array<!proto.types.MemberAttr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.MemberAttr, 4));
};


/** @param {!Array<!proto.types.MemberAttr>} value */
proto.types.GetClusterInfoResponse.prototype.setMbrattrsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.types.MemberAttr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.MemberAttr}
 */
proto.types.GetClusterInfoResponse.prototype.addMbrattrs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.types.MemberAttr, opt_index);
};


proto.types.GetClusterInfoResponse.prototype.clearMbrattrsList = function() {
  this.setMbrattrsList([]);
};


/**
 * optional uint64 bestBlockNo = 5;
 * @return {number}
 */
proto.types.GetClusterInfoResponse.prototype.getBestblockno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.types.GetClusterInfoResponse.prototype.setBestblockno = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional HardStateInfo hardStateInfo = 6;
 * @return {?proto.types.HardStateInfo}
 */
proto.types.GetClusterInfoResponse.prototype.getHardstateinfo = function() {
  return /** @type{?proto.types.HardStateInfo} */ (
    jspb.Message.getWrapperField(this, proto.types.HardStateInfo, 6));
};


/** @param {?proto.types.HardStateInfo|undefined} value */
proto.types.GetClusterInfoResponse.prototype.setHardstateinfo = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.types.GetClusterInfoResponse.prototype.clearHardstateinfo = function() {
  this.setHardstateinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.types.GetClusterInfoResponse.prototype.hasHardstateinfo = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.ConfChangeProgress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.types.ConfChangeProgress.repeatedFields_, null);
};
goog.inherits(proto.types.ConfChangeProgress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.ConfChangeProgress.displayName = 'proto.types.ConfChangeProgress';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.types.ConfChangeProgress.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.ConfChangeProgress.prototype.toObject = function(opt_includeInstance) {
  return proto.types.ConfChangeProgress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.ConfChangeProgress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ConfChangeProgress.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, 0),
    err: jspb.Message.getFieldWithDefault(msg, 2, ""),
    membersList: jspb.Message.toObjectList(msg.getMembersList(),
    proto.types.MemberAttr.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.ConfChangeProgress}
 */
proto.types.ConfChangeProgress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.ConfChangeProgress;
  return proto.types.ConfChangeProgress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.ConfChangeProgress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.ConfChangeProgress}
 */
proto.types.ConfChangeProgress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.ConfChangeState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErr(value);
      break;
    case 3:
      var value = new proto.types.MemberAttr;
      reader.readMessage(value,proto.types.MemberAttr.deserializeBinaryFromReader);
      msg.addMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.ConfChangeProgress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.ConfChangeProgress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.ConfChangeProgress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.ConfChangeProgress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getErr();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.types.MemberAttr.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConfChangeState State = 1;
 * @return {!proto.types.ConfChangeState}
 */
proto.types.ConfChangeProgress.prototype.getState = function() {
  return /** @type {!proto.types.ConfChangeState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.types.ConfChangeState} value */
proto.types.ConfChangeProgress.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string Err = 2;
 * @return {string}
 */
proto.types.ConfChangeProgress.prototype.getErr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.types.ConfChangeProgress.prototype.setErr = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated MemberAttr Members = 3;
 * @return {!Array<!proto.types.MemberAttr>}
 */
proto.types.ConfChangeProgress.prototype.getMembersList = function() {
  return /** @type{!Array<!proto.types.MemberAttr>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.types.MemberAttr, 3));
};


/** @param {!Array<!proto.types.MemberAttr>} value */
proto.types.ConfChangeProgress.prototype.setMembersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.types.MemberAttr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.types.MemberAttr}
 */
proto.types.ConfChangeProgress.prototype.addMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.types.MemberAttr, opt_index);
};


proto.types.ConfChangeProgress.prototype.clearMembersList = function() {
  this.setMembersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.types.SnapshotResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.types.SnapshotResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.types.SnapshotResponse.displayName = 'proto.types.SnapshotResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.types.SnapshotResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.types.SnapshotResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.types.SnapshotResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SnapshotResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, 0),
    message: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.types.SnapshotResponse}
 */
proto.types.SnapshotResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.types.SnapshotResponse;
  return proto.types.SnapshotResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.types.SnapshotResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.types.SnapshotResponse}
 */
proto.types.SnapshotResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.types.ResultStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.types.SnapshotResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.types.SnapshotResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.types.SnapshotResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.types.SnapshotResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ResultStatus status = 1;
 * @return {!proto.types.ResultStatus}
 */
proto.types.SnapshotResponse.prototype.getStatus = function() {
  return /** @type {!proto.types.ResultStatus} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.types.ResultStatus} value */
proto.types.SnapshotResponse.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.types.SnapshotResponse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.types.SnapshotResponse.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.types.MembershipChangeType = {
  ADD_MEMBER: 0,
  REMOVE_MEMBER: 1
};

/**
 * @enum {number}
 */
proto.types.ConfChangeState = {
  CONF_CHANGE_STATE_PROPOSED: 0,
  CONF_CHANGE_STATE_SAVED: 1,
  CONF_CHANGE_STATE_APPLIED: 2
};

goog.object.extend(exports, proto.types);
